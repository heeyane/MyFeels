{"ast":null,"code":"const self = module.exports = {\n  // emotions mapped to energy and mood levels\n  feelings: [{\n    x: -2,\n    y: 2,\n    emotion: \"Angry\"\n  }, {\n    x: -1,\n    y: 2,\n    emotion: \"Tense\"\n  }, {\n    x: 1,\n    y: 2,\n    emotion: \"Surprised\"\n  }, {\n    x: 2,\n    y: 2,\n    emotion: \"Excited\"\n  }, {\n    x: -2,\n    y: 1,\n    emotion: \"Anxious\"\n  }, {\n    x: -1,\n    y: 1,\n    emotion: \"Annoyed\"\n  }, {\n    x: 1,\n    y: 1,\n    emotion: \"Happy\"\n  }, {\n    x: 2,\n    y: 1,\n    emotion: \"Hopeful\"\n  }, {\n    x: -2,\n    y: -1,\n    emotion: \"Upset\"\n  }, {\n    x: -1,\n    y: -1,\n    emotion: \"Sad\"\n  }, {\n    x: 1,\n    y: -1,\n    emotion: \"Calm\"\n  }, {\n    x: 2,\n    y: -1,\n    emotion: \"Fulfilled\"\n  }, {\n    x: -2,\n    y: -2,\n    emotion: \"Hopeless\"\n  }, {\n    x: -1,\n    y: -2,\n    emotion: \"Drained\"\n  }, {\n    x: 1,\n    y: -2,\n    emotion: \"Relaxed\"\n  }, {\n    x: 2,\n    y: -2,\n    emotion: \"Peaceful\"\n  }],\n  // weights values mapped to duration\n  weights: [{\n    w: 1,\n    descriptor: \"In passing\"\n  }, {\n    w: 2,\n    descriptor: \"Some of the day\"\n  }, {\n    w: 3,\n    descriptor: \"Most of the day\"\n  }, {\n    w: 4,\n    descriptor: \"All day\"\n  }],\n  // descriptors for mood\n  mood: [{\n    x: 2,\n    descriptor: \"Very Positive\"\n  }, {\n    x: 1,\n    descriptor: \"Moderately Positive\"\n  }, {\n    x: 0,\n    descriptor: \"Neutral\"\n  }, {\n    x: -1,\n    descriptor: \"Moderately Negative\"\n  }, {\n    x: -2,\n    descriptor: \"Very Negative\"\n  }],\n  // descriptors for change in mood\n  moodChange: {\n    increase: \"More Positive\",\n    decrease: \"More Negative\"\n  },\n  // descriptors for energy\n  energy: [{\n    y: 2,\n    descriptor: \"Very High\"\n  }, {\n    y: 1,\n    descriptor: \"Moderately High\"\n  }, {\n    y: 0,\n    descriptor: \"Neutral\"\n  }, {\n    y: -1,\n    descriptor: \"Moderately Low\"\n  }, {\n    y: -2,\n    descriptor: \"Very Low\"\n  }],\n  // descriptors for change in energy\n  energyChange: {\n    increase: \"Higher\",\n    decrease: \"Lower\"\n  },\n  // factors to be tracked with chart labels and intitial state\n  factorsTracked: [{\n    activity: \"Eat healthy meals\",\n    label: \"diet\",\n    state: false\n  }, {\n    activity: \"Exercise at least 30 minutes\",\n    label: \"exercise\",\n    state: false\n  }, {\n    activity: \"Get at least 8 hours of sleep\",\n    label: \"sleep\",\n    state: false\n  }, {\n    activity: \"Drink alcohol\",\n    label: \"alcohol\",\n    state: false\n  }],\n  // get emotion from x and y values\n  emotion: (x, y) => {\n    const feeling = self.feelings.find(feeling => x === feeling.x && y === feeling.y);\n    return feeling.emotion;\n  },\n  // get x and y values from emotion\n  feeling: emotion => {\n    const values = self.feelings.find(feeling => emotion === feeling.emotion);\n    return values;\n  },\n  // get descriptor for weight\n  duration: w => {\n    const duration = self.weights.find(weight => w === weight.w);\n    return duration.descriptor;\n  },\n  // get descriptors for mood and energy\n  descriptors: emotionData => {\n    const emotionPositivity = self.mood.find(item => item.x === Math.round(emotionData.x));\n    const emotionEnergy = self.energy.find(item => item.y === Math.round(emotionData.y));\n    return {\n      mood: emotionPositivity.descriptor,\n      energy: emotionEnergy.descriptor\n    };\n  },\n  // helper function to calculate averages\n  average: entries => {\n    // initialize total values\n    let totalX = 0;\n    let totalY = 0;\n    let totalWeight = 0; // for each entry add values from each emotion to total values\n\n    if (!entries.length) return {\n      x: 0,\n      y: 0\n    };\n    entries.forEach(entry => {\n      entry.emotions.forEach(emotion => {\n        totalX += emotion.x * emotion.weight;\n        totalY += emotion.y * emotion.weight;\n        totalWeight += emotion.weight;\n      });\n    }); // calculate averages\n\n    const averageX = totalX / totalWeight;\n    const averageY = totalY / totalWeight; // return average x and y values\n\n    return {\n      x: averageX,\n      y: averageY\n    };\n  },\n  // helper function to calculate percentage change\n  compare: (limitedEntries, allEntries) => {\n    const changedAverage = self.average(limitedEntries);\n    const overallAverage = self.average(allEntries); // calculate differential\n\n    const changeX = (changedAverage.x - overallAverage.x) / Math.abs(overallAverage.x);\n    const changeY = (changedAverage.y - overallAverage.y) / Math.abs(overallAverage.y); // return differentials\n\n    return {\n      x: changeX,\n      y: changeY\n    };\n  },\n  // helper function to get percentages\n  percentages: emotionObject => {\n    // calculate percentages\n    const positivity = Math.round(emotionObject.x * 100);\n    const energy = Math.round(emotionObject.y * 100); // choose descriptors for increase versus decrease\n\n    const percentPositive = positivity >= 0 ? `${positivity}% ${self.moodChange.increase}` : `${Math.abs(positivity)}% ${self.moodChange.decrease}`;\n    const percentEnergy = energy >= 0 ? `${energy}% ${self.energyChange.increase}` : `${Math.abs(energy)}% ${self.energyChange.decrease}`; // return percentage change\n\n    return {\n      positivity: percentPositive,\n      energy: percentEnergy\n    };\n  },\n  // helper function to get growth trends\n  // currently simple linear growth pattern\n  // accuracy could be improved for larger data sets by using exponential moving average formula\n  growth: entries => {\n    const current = self.average([entries[entries.length - 1]]);\n    const base = self.average([entries[0]]);\n    const growthRate = self.percentages({\n      x: (current.x - base.x / base.x) / entries.length,\n      y: (current.y - base.y / base.y) / entries.length\n    });\n    return growthRate;\n  },\n  // helper function to get differentials\n  differential: (entries, effectFactor) => {\n    const filtered = entries.filter(entry => entry.factors.find(factor => factor.activity === effectFactor && factor.state === true));\n    if (!filtered.length) return null;\n    const comparison = self.compare(filtered, entries);\n    const percentChange = self.percentages(comparison);\n    return percentChange;\n  },\n  // helper function to get average of a filtered set of entries\n  filteredAverage: (entries, effectFactor) => {\n    const filtered = entries.filter(entry => entry.factors.find(factor => factor.activity === effectFactor && factor.state === true));\n    if (!filtered.length) return null;\n    const average = self.average(filtered);\n    return average;\n  }\n};","map":{"version":3,"sources":["/Users/HeeSeung/Desktop/project4/my-feels/client/src/utils/EmotionMap.js"],"names":["self","module","exports","feelings","x","y","emotion","weights","w","descriptor","mood","moodChange","increase","decrease","energy","energyChange","factorsTracked","activity","label","state","feeling","find","values","duration","weight","descriptors","emotionData","emotionPositivity","item","Math","round","emotionEnergy","average","entries","totalX","totalY","totalWeight","length","forEach","entry","emotions","averageX","averageY","compare","limitedEntries","allEntries","changedAverage","overallAverage","changeX","abs","changeY","percentages","emotionObject","positivity","percentPositive","percentEnergy","growth","current","base","growthRate","differential","effectFactor","filtered","filter","factors","factor","comparison","percentChange","filteredAverage"],"mappings":"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","sourcesContent":["const self = (module.exports = {\n    // emotions mapped to energy and mood levels\n    feelings: [\n        { x: -2, y: 2, emotion: \"Angry\" },\n        { x: -1, y: 2, emotion: \"Tense\" },\n        { x: 1, y: 2, emotion: \"Surprised\" },\n        { x: 2, y: 2, emotion: \"Excited\" },\n\n        { x: -2, y: 1, emotion: \"Anxious\" },\n        { x: -1, y: 1, emotion: \"Annoyed\" },\n        { x: 1, y: 1, emotion: \"Happy\" },\n        { x: 2, y: 1, emotion: \"Hopeful\" },\n\n        { x: -2, y: -1, emotion: \"Upset\" },\n        { x: -1, y: -1, emotion: \"Sad\" },\n        { x: 1, y: -1, emotion: \"Calm\" },\n        { x: 2, y: -1, emotion: \"Fulfilled\" },\n\n        { x: -2, y: -2, emotion: \"Hopeless\" },\n        { x: -1, y: -2, emotion: \"Drained\" },\n        { x: 1, y: -2, emotion: \"Relaxed\" },\n        { x: 2, y: -2, emotion: \"Peaceful\" },\n    ],\n\n    // weights values mapped to duration\n    weights: [\n        { w: 1, descriptor: \"In passing\" },\n        { w: 2, descriptor: \"Some of the day\" },\n        { w: 3, descriptor: \"Most of the day\" },\n        { w: 4, descriptor: \"All day\" },\n    ],\n\n    // descriptors for mood\n    mood: [\n        { x: 2, descriptor: \"Very Positive\" },\n        { x: 1, descriptor: \"Moderately Positive\" },\n        { x: 0, descriptor: \"Neutral\" },\n        { x: -1, descriptor: \"Moderately Negative\" },\n        { x: -2, descriptor: \"Very Negative\" },\n    ],\n\n    // descriptors for change in mood\n    moodChange: {\n        increase: \"More Positive\",\n        decrease: \"More Negative\",\n    },\n\n    // descriptors for energy\n    energy: [\n        { y: 2, descriptor: \"Very High\" },\n        { y: 1, descriptor: \"Moderately High\" },\n        { y: 0, descriptor: \"Neutral\" },\n        { y: -1, descriptor: \"Moderately Low\" },\n        { y: -2, descriptor: \"Very Low\" },\n    ],\n\n    // descriptors for change in energy\n    energyChange: { increase: \"Higher\", decrease: \"Lower\" },\n\n    // factors to be tracked with chart labels and intitial state\n    factorsTracked: [\n        { activity: \"Eat healthy meals\", label: \"diet\", state: false },\n        { activity: \"Exercise at least 30 minutes\", label: \"exercise\", state: false },\n        { activity: \"Get at least 8 hours of sleep\", label: \"sleep\", state: false },\n        { activity: \"Drink alcohol\", label: \"alcohol\", state: false },\n    ],\n\n    // get emotion from x and y values\n    emotion: (x, y) => {\n        const feeling = self.feelings.find((feeling) => x === feeling.x && y === feeling.y);\n        return feeling.emotion;\n    },\n\n    // get x and y values from emotion\n    feeling: (emotion) => {\n        const values = self.feelings.find((feeling) => emotion === feeling.emotion);\n        return values;\n    },\n\n    // get descriptor for weight\n    duration: (w) => {\n        const duration = self.weights.find((weight) => w === weight.w);\n        return duration.descriptor;\n    },\n\n    // get descriptors for mood and energy\n    descriptors: (emotionData) => {\n        const emotionPositivity = self.mood.find((item) => item.x === Math.round(emotionData.x));\n        const emotionEnergy = self.energy.find((item) => item.y === Math.round(emotionData.y));\n        return {\n            mood: emotionPositivity.descriptor,\n            energy: emotionEnergy.descriptor,\n        };\n    },\n\n    // helper function to calculate averages\n    average: (entries) => {\n        // initialize total values\n        let totalX = 0;\n        let totalY = 0;\n        let totalWeight = 0;\n        // for each entry add values from each emotion to total values\n        if (!entries.length) return { x: 0, y: 0 };\n        entries.forEach((entry) => {\n            entry.emotions.forEach((emotion) => {\n                totalX += emotion.x * emotion.weight;\n                totalY += emotion.y * emotion.weight;\n                totalWeight += emotion.weight;\n            });\n        });\n        // calculate averages\n        const averageX = totalX / totalWeight;\n        const averageY = totalY / totalWeight;\n        // return average x and y values\n        return { x: averageX, y: averageY };\n    },\n\n    // helper function to calculate percentage change\n    compare: (limitedEntries, allEntries) => {\n        const changedAverage = self.average(limitedEntries);\n        const overallAverage = self.average(allEntries);\n        // calculate differential\n        const changeX = (changedAverage.x - overallAverage.x) / Math.abs(overallAverage.x);\n        const changeY = (changedAverage.y - overallAverage.y) / Math.abs(overallAverage.y);\n        // return differentials\n        return { x: changeX, y: changeY };\n    },\n\n    // helper function to get percentages\n    percentages: (emotionObject) => {\n        // calculate percentages\n        const positivity = Math.round(emotionObject.x * 100);\n        const energy = Math.round(emotionObject.y * 100);\n        // choose descriptors for increase versus decrease\n        const percentPositive = positivity >= 0 ? `${positivity}% ${self.moodChange.increase}` : `${Math.abs(positivity)}% ${self.moodChange.decrease}`;\n        const percentEnergy = energy >= 0 ? `${energy}% ${self.energyChange.increase}` : `${Math.abs(energy)}% ${self.energyChange.decrease}`;\n        // return percentage change\n        return { positivity: percentPositive, energy: percentEnergy };\n    },\n\n    // helper function to get growth trends\n    // currently simple linear growth pattern\n    // accuracy could be improved for larger data sets by using exponential moving average formula\n    growth: (entries) => {\n        const current = self.average([entries[entries.length - 1]]);\n        const base = self.average([entries[0]]);\n        const growthRate = self.percentages({\n            x: (current.x - base.x / base.x) / entries.length,\n            y: (current.y - base.y / base.y) / entries.length,\n        });\n        return growthRate;\n    },\n\n    // helper function to get differentials\n    differential: (entries, effectFactor) => {\n        const filtered = entries.filter((entry) => entry.factors.find((factor) => factor.activity === effectFactor && factor.state === true));\n        if (!filtered.length) return null;\n        const comparison = self.compare(filtered, entries);\n        const percentChange = self.percentages(comparison);\n        return percentChange;\n    },\n\n    // helper function to get average of a filtered set of entries\n    filteredAverage: (entries, effectFactor) => {\n        const filtered = entries.filter((entry) => entry.factors.find((factor) => factor.activity === effectFactor && factor.state === true));\n        if (!filtered.length) return null;\n        const average = self.average(filtered);\n        return average;\n    },\n});\n"]},"metadata":{},"sourceType":"module"}